{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","sessionId","uuid","commands","command","callback","userSpeak","setMyPhrase","useSpeechRecognition","transcript","resetTranscript","speak","useSpeechSynthesis","useState","chatOn","setchatOn","myPhrase","botPhrase","setBotPhrase","phraseOnScreen","setPhraseOnScreen","useEffect","console","log","messageObject","text","axios","post","then","res","data","catch","SpeechRecognition","browserSupportsSpeechRecognition","className","src","logo","alt","onClick","stopListening","startListening","continuous","language","href","target","rel","e","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAAe,MAA0B,iC,eC6G1BA,EAlGH,WACV,IAAMC,EAAYC,cAEZC,EAAW,CACf,CACEC,QAAS,IACTC,SAAU,SAACC,GAAD,OAAeC,EAAYD,MANzB,EAUwBE,+BAAqB,CAAEL,aAAvDM,EAVQ,EAURA,WAAYC,EAVJ,EAUIA,gBACZC,EAAUC,+BAAVD,MAXQ,EAYYE,oBAAS,GAZrB,mBAYTC,EAZS,KAYDC,EAZC,OAagBF,mBAAS,IAbzB,mBAaTG,EAbS,KAaCT,EAbD,OAckBM,mBAAS,IAd3B,mBAcTI,EAdS,KAcEC,EAdF,OAe4BL,mBAAS,IAfrC,mBAeTM,EAfS,KAeOC,EAfP,KAwChB,GAvBAC,qBAAU,WACR,GAAiB,KAAbL,EAAiB,CACnBN,IACAU,EAAkBJ,GAClBM,QAAQC,IAAR,oBAAyBP,IACzB,IAAMQ,EAAgB,CAAEC,KAAMT,EAAUd,KAAMD,GAC9CyB,IACGC,KA3BO,kBA2BOH,GACdI,MAAK,SAAAC,GAAG,OAAIX,EAAaW,EAAIC,SAC7BC,OAAM,kBAAMb,EAAa,gCAC5BX,EAAY,OAEb,CAACS,IAEJK,qBAAU,WACU,KAAdJ,IACFG,EAAkBH,GAClBK,QAAQC,IAAR,qBAA0BN,IAC1BN,EAAM,CAAEc,KAAMR,IACdC,EAAa,OAEd,CAACD,KAECe,IAAkBC,mCACrB,OACE,6EAwBJ,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACGpB,EACC,gCACE,qBAAKqB,IAAKC,EAAMF,UAAU,eAAeG,IAAI,OAAOC,QAfxC,WACpBN,IAAkBO,gBAClB7B,IACAK,GAAWD,MAaFL,EACC,4BAAIA,IAEJ,4BAAIU,OAIR,gCACE,qBAAKgB,IAAKC,EAAMF,UAAU,gBAAgBG,IAAI,OAAOC,QAhC1C,WACnBvB,GAAWD,GACXI,EAAa,wBACbc,IAAkBQ,eAAe,CAC/BC,YAAY,EACZC,SAAU,aA4BJ,2EAGJ,mBACER,UAAU,WACVS,KAAK,8CACLC,OAAO,SACPC,IAAI,sBACJP,QA5BU,SAACQ,GACjB5B,EAAa,qBAsBT,+BCnFO6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.43e5a206.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/* eslint-disable react-hooks/exhaustive-deps */\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport { useSpeechSynthesis } from 'react-speech-kit';\nimport axios from 'axios'\nimport { v4 as uuid } from 'uuid'\nimport logo from './logo.svg';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nconst baseUrl = '/api/dialogflow'\n\n\nconst App = () => {\n  const sessionId = uuid()\n\n  const commands = [\n    {\n      command: '*',\n      callback: (userSpeak) => setMyPhrase(userSpeak)\n    },\n  ]\n\n  const { transcript, resetTranscript } = useSpeechRecognition({ commands });\n  const { speak } = useSpeechSynthesis();\n  const [chatOn, setchatOn] = useState(false)\n  const [myPhrase, setMyPhrase] = useState('')\n  const [botPhrase, setBotPhrase] = useState('')\n  const [phraseOnScreen, setPhraseOnScreen] = useState('')\n\n  useEffect(() => {\n    if (myPhrase !== '') {\n      resetTranscript()\n      setPhraseOnScreen(myPhrase)\n      console.log(`myPhrase: ${myPhrase}`)\n      const messageObject = { text: myPhrase, uuid: sessionId }\n      axios\n        .post(baseUrl, messageObject)\n        .then(res => setBotPhrase(res.data))\n        .catch(() => setBotPhrase('Back end is taking break.'))\n      setMyPhrase('')\n    }\n  }, [myPhrase])\n\n  useEffect(() => {\n    if (botPhrase !== '') {\n      setPhraseOnScreen(botPhrase)\n      console.log(`botPhrase: ${botPhrase}`)\n      speak({ text: botPhrase })\n      setBotPhrase('')\n    }\n  }, [botPhrase])\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return (\n      <div>\n        Browser is not Support Speech Recognition.\n      </div>\n    );\n  }\n\n  const handleChatOn = () => {\n    setchatOn(!chatOn)\n    setBotPhrase(`What's on Your Mind?`)\n    SpeechRecognition.startListening({\n      continuous: true,\n      language: 'en-US',\n    });\n  }\n  const handleChatOff = () => {\n    SpeechRecognition.stopListening();\n    resetTranscript();\n    setchatOn(!chatOn)\n  }\n  const notSoFast = (e) => {\n    setBotPhrase(`Hey don't leave.`)\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {chatOn ?\n          <div>\n            <img src={logo} className=\"App-logo-run\" alt=\"logo\" onClick={handleChatOff} />\n            {transcript ?\n              <p>{transcript}</p>\n              :\n              <p>{phraseOnScreen}</p>\n            }\n          </div>\n          :\n          <div>\n            <img src={logo} className=\"App-logo-stop\" alt=\"logo\" onClick={handleChatOn} />\n            <p>Click logo to start boilerplate chat...</p>\n          </div>\n        }\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/Pinosto/boilerplate-chat\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          onClick={notSoFast}\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}